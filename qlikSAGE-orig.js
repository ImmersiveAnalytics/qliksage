//
// SAGE2 application: welcome
// by: Luc Renambot <renambot@gmail.com>
//
// Copyright (c) 2015
//

var app, qlikLoaded = false, q;

function addCSS(url, callback) {
	var fileref = document.createElement("link");

	if (callback) {
		fileref.onload = callback;
	}

	fileref.setAttribute("rel", "stylesheet");
	fileref.setAttribute("type", "text/css");
	fileref.setAttribute("href", url);
	document.head.appendChild(fileref);
}

var config = {
	host: "pe.r53.qlikview.com",
	prefix: "/",
	// port: 4848,
	port: 443,
	// isSecure: window.location.protocol === "https:"
	isSecure: true
};

require.config( {
	baseUrl: ( config.isSecure ? "https://" : "http://" ) + config.host + (config.port ? ":" + config.port: "") + config.prefix + "resources"
} );

/****** MOUSE EVENT SIMULATION ******/
function simulate(element, eventName)
{
    var options = extend(defaultOptions, arguments[2] || {});
    var oEvent, eventType = null;

    for (var name in eventMatchers)
    {
        if (eventMatchers[name].test(eventName)) { eventType = name; break; }
    }

    if (!eventType)
        throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');

    if (document.createEvent)
    {
        oEvent = document.createEvent(eventType);
        if (eventType == 'HTMLEvents')
        {
            oEvent.initEvent(eventName, options.bubbles, options.cancelable);
        }
        else
        {
            oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,
            options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
        }
        element.dispatchEvent(oEvent);
    }
    else
    {
        options.clientX = options.pointerX;
        options.clientY = options.pointerY;
        var evt = document.createEventObject();
        oEvent = extend(evt, options);
        element.fireEvent('on' + eventName, oEvent);
    }
    console.log("fired event",eventName,"on",element);
    console.log("pointer",options.pointerX,options.pointerY);
    console.log("oEvent",oEvent);
    return element;
}
// var cancelled = !oEvent.initMouseEvent("mouseup",true,true,document.defaultView,0,130,606,130,606,false,false,false,false,0,document.getElementsByTagName("body")[0]);
// document.getElementsByTagName("body")[0].dispatchEvent(oEvent);

function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
}

var eventMatchers = {
    'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
    'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
}
var defaultOptions = {
    pointerX: 0,
    pointerY: 0,
    button: 0,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    bubbles: true,
    cancelable: true
}
/****** END MOUSE EVENT SIMULATION ******/


var qlikSAGE = SAGE2_App.extend( {
    init: function(data) {
        // data: contains initialization parameters, such as `x`, `y`, `width`, `height`, and `date`
        this.SAGE2Init('div', data);

        this.resizeEvents = "continuous";//see below for other options

        // initialize your variables
        this.myvalue = 5.0;

		this.element.id = "div" + data.id;
        var el = this.element;
    	this.element.style.zIndex = "100";


		require( ["js/qlik"], function ( qlik ) {
			q = qlik;
			// var app = q.openApp('Branch Showcase.qvf', config);
			app = qlik.openApp('9fdcc1ab-9992-44a0-accf-97f231a07121', config);
			console.log("Finished loading app");

	        // addCSS("https://pe.r53.qlikview.com/resources/autogenerated/qlik-styles.css", function(){
            // addCSS("https://pe.r53.qlikview.com/resources/autogenerated/qlikui.css", function(){
            addCSS("https://pe.qlik.com/resources/autogenerated/qlikui.css", function(){
	        	console.log("Finished adding qlikui.css");
	        });
            // addCSS("https://pe.r53.qlikview.com/resources/assets/client/client.css", function(){
            addCSS("https://pe.qlik.com/resources/assets/client/client.css", function(){
	        	console.log("Finished adding client.css",el);

	        	qlikLoaded = true;
	        	app.getObject(el.id, 'cmNQePB');
				document.getElementById(el.id).style.backgroundColor = "white";
	        });
		});

    },

    //load function allows application to begin with a particular state.  Needed for remote site collaboration.
    load: function(date) {
        //your load code here- update app based on this.state
    },

    draw: function(date) {
        // application specific 'draw'
        // console.log("Draw",this);
        if(!qlikLoaded)
			this.element.innerHTML = "Loading...";
    },

    resize: function(date) {
        // to do:  may be a super class resize
        // or your resize code here
        this.refresh(date); //redraw after resize
        q.resize();
    },

    event: function(type, position, user, data, date) {
    	// console.log(type, position, user, data, date);
        if (type === "pointerRelease" && (data.button === "left")) {
        	console.log(this.element);
        	var absPos = this.element.parentNode.getBoundingClientRect();
            console.log("absPos",absPos.left + "," + absPos.top);
            // var el = document.elementFromPoint(absPos.left+position.x-50, absPos.top+position.y-50);
            var el = document.elementFromPoint(absPos.left+position.x-25, absPos.top+position.y-25);
            console.log("position",position.x + "," + position.y);
            // simulate(el,"mouseup",{pointerX: absPos.left+position.x-50, pointerY: absPos.top+position.y-50});
            simulate(el,"mouseup",{pointerX: absPos.left+position.x-25, pointerY: absPos.top+position.y-25});
        }

        // may need to update state here

        // may need to redraw
        this.refresh(date);
    },

    move: function(date) {
        // this.sage2_x, this.sage2_y give x,y position of upper left corner of app in global wall coordinates
                // this.sage2_width, this.sage2_height give width and height of app in global wall coordinates
                // date: when it happened
        this.refresh(date);
       },

    quit: function() {
        // It's the end
        console.log("Done");
    }
});
